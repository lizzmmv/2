import Foundation
import RealmSwift

class Repository: Object {
    @objc dynamic var id: String = ""
    @objc dynamic var name: String = ""
    @objc dynamic var descriptionText: String? = nil
    @objc dynamic var starsCount: Int = 0
    
    override class func primaryKey() -> String? {
        return "id"
    }
}
import Foundation

struct GitHubAPI {
    static let baseURL = "https://api.github.com/search/repositories"
    
    static func fetchRepositories(page: Int) async throws -> [Repository] {
        let url = URL(string: "(baseURL)?q=swift&sort=stars&order=asc&page=(page)")!
        let (data, _) = try await URLSession.shared.data(from: url)
        
        let decoder = JSONDecoder()
        let response = try decoder.decode(GitHubResponse.self, from: data)
        return response.items.map { item in
            let repo = Repository()
            repo.id = item.id
            repo.name = item.name
            repo.descriptionText = item.description
            repo.starsCount = item.stargazersCount
            return repo
        }
    }
}

struct GitHubResponse: Decodable {
    let items: [GitHubRepo]
}

struct GitHubRepo: Decodable {
    let id: String
    let name: String
    let description: String?
    let stargazersCount: Int
}
import RealmSwift

class RepositoryStorage {
    private let realm = try! Realm()
    
    func save(repositories: [Repository]) {
        try! realm.write {
            realm.add(repositories, update: .modified)
        }
    }
    
    func fetchAll() -> Results<Repository> {
        return realm.objects(Repository.self)
    }
}
import Combine

class RepositoriesViewModel: ObservableObject {
    @Published var repositories: [Repository] = []
    private var currentPage = 1
    private var storage = RepositoryStorage()
    
    func loadMore() async {
        do {
            let newRepos = try await GitHubAPI.fetchRepositories(page: currentPage)
            storage.save(repositories: newRepos)
            repositories.append(contentsOf: newRepos)
            currentPage += 1
        } catch {
            print("Error fetching repositories: (error)")
        }
    }
}
import SwiftUI

struct ContentView: View {
    @StateObject private var viewModel = RepositoriesViewModel()
    
    var body: some View {
        List {
            ForEach(viewModel.repositories, id: .id) { repo in
                VStack(alignment: .leading) {
                    Text(repo.name).font(.headline)
                    Text(repo.descriptionText ?? "No description").font(.subheadline)
                    Text("Stars: (repo.starsCount)").font(.footnote)
                }
                .padding()
            }
            
            if viewModel.repositories.count > 0 {
                ProgressView("Loading more...")
                    .onAppear {
                        Task {
                            await viewModel.loadMore()
                        }
                    }
            }
        }
        .task {
            await viewModel.loadMore()
        }
    }
}
import XCTest
@testable import YourAppModule

class RepositoriesViewModelTests: XCTestCase {
    
    func testLoadMore() async {
        let viewModel = RepositoriesViewModel()
        
        await viewModel.loadMore()
        
        XCTAssertFalse(viewModel.repositories.isEmpty, "Repositories should not be empty after loading")
    }
}
